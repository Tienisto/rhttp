// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.3.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 2133635912;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__client__client_settings_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "client_settings_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::client::ClientSettings::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__http__cancel_request_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "cancel_request",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_address = <i64>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::http::cancel_request(api_address))?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__http__make_http_request_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "make_http_request",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_client_address = <Option<i64>>::sse_decode(&mut deserializer);
            let api_settings =
                <Option<crate::api::client::ClientSettings>>::sse_decode(&mut deserializer);
            let api_method = <crate::api::http::HttpMethod>::sse_decode(&mut deserializer);
            let api_url = <String>::sse_decode(&mut deserializer);
            let api_query = <Option<Vec<(String, String)>>>::sse_decode(&mut deserializer);
            let api_headers =
                <Option<crate::api::http::HttpHeaders>>::sse_decode(&mut deserializer);
            let api_body = <Option<crate::api::http::HttpBody>>::sse_decode(&mut deserializer);
            let api_expect_body = <crate::api::http::HttpExpectBody>::sse_decode(&mut deserializer);
            let api_on_cancel_token = decode_DartFn_Inputs_i_64_Output_unit_AnyhowException(
                <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
            );
            let api_cancelable = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::RhttpError>(
                    (move || async move {
                        let output_ok = crate::api::http::make_http_request(
                            api_client_address,
                            api_settings,
                            api_method,
                            api_url,
                            api_query,
                            api_headers,
                            api_body,
                            api_expect_body,
                            api_on_cancel_token,
                            api_cancelable,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__http__make_http_request_receive_stream_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "make_http_request_receive_stream",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_client_address = <Option<i64>>::sse_decode(&mut deserializer);
            let api_settings =
                <Option<crate::api::client::ClientSettings>>::sse_decode(&mut deserializer);
            let api_method = <crate::api::http::HttpMethod>::sse_decode(&mut deserializer);
            let api_url = <String>::sse_decode(&mut deserializer);
            let api_query = <Option<Vec<(String, String)>>>::sse_decode(&mut deserializer);
            let api_headers =
                <Option<crate::api::http::HttpHeaders>>::sse_decode(&mut deserializer);
            let api_body = <Option<crate::api::http::HttpBody>>::sse_decode(&mut deserializer);
            let api_stream_sink =
                <StreamSink<Vec<u8>, flutter_rust_bridge::for_generated::SseCodec>>::sse_decode(
                    &mut deserializer,
                );
            let api_on_response = decode_DartFn_Inputs_http_response_Output_unit_AnyhowException(
                <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
            );
            let api_on_cancel_token = decode_DartFn_Inputs_i_64_Output_unit_AnyhowException(
                <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
            );
            let api_cancelable = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::RhttpError>(
                    (move || async move {
                        let output_ok = crate::api::http::make_http_request_receive_stream(
                            api_client_address,
                            api_settings,
                            api_method,
                            api_url,
                            api_query,
                            api_headers,
                            api_body,
                            api_stream_sink,
                            api_on_response,
                            api_on_cancel_token,
                            api_cancelable,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__http__register_client_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "register_client",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_settings = <crate::api::client::ClientSettings>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::RhttpError>(
                    (move || async move {
                        let output_ok = crate::api::http::register_client(api_settings).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__http__register_client_sync_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "register_client_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_settings = <crate::api::client::ClientSettings>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, crate::api::error::RhttpError>((move || {
                let output_ok = crate::api::http::register_client_sync(api_settings)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__http__remove_client_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "remove_client",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_address = <i64>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::http::remove_client(api_address);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__init__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::init::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: related_funcs

fn decode_DartFn_Inputs_http_response_Output_unit_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(crate::api::http::HttpResponse) -> flutter_rust_bridge::DartFnFuture<()> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: crate::api::http::HttpResponse,
    ) -> () {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<()>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: crate::api::http::HttpResponse| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_i_64_Output_unit_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(i64) -> flutter_rust_bridge::DartFnFuture<()> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: i64) -> () {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<()>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: i64| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for chrono::Duration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i64>::sse_decode(deserializer);
        return chrono::Duration::microseconds(inner);
    }
}

impl SseDecode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_dart_opaque(inner) };
    }
}

impl SseDecode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, String)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for StreamSink<Vec<u8>, flutter_rust_bridge::for_generated::SseCodec> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::client::ClientCertificate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_certificate = <Vec<u8>>::sse_decode(deserializer);
        let mut var_privateKey = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::client::ClientCertificate {
            certificate: var_certificate,
            private_key: var_privateKey,
        };
    }
}

impl SseDecode for crate::api::client::ClientSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_httpVersionPref = <crate::api::http::HttpVersionPref>::sse_decode(deserializer);
        let mut var_timeout = <Option<chrono::Duration>>::sse_decode(deserializer);
        let mut var_connectTimeout = <Option<chrono::Duration>>::sse_decode(deserializer);
        let mut var_throwOnStatusCode = <bool>::sse_decode(deserializer);
        let mut var_proxySettings =
            <Option<crate::api::client::ProxySettings>>::sse_decode(deserializer);
        let mut var_tlsSettings =
            <Option<crate::api::client::TlsSettings>>::sse_decode(deserializer);
        return crate::api::client::ClientSettings {
            http_version_pref: var_httpVersionPref,
            timeout: var_timeout,
            connect_timeout: var_connectTimeout,
            throw_on_status_code: var_throwOnStatusCode,
            proxy_settings: var_proxySettings,
            tls_settings: var_tlsSettings,
        };
    }
}

impl SseDecode for crate::api::http::HttpBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::http::HttpBody::Text(var_field0);
            }
            1 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::http::HttpBody::Bytes(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <std::collections::HashMap<String, String>>::sse_decode(deserializer);
                return crate::api::http::HttpBody::Form(var_field0);
            }
            3 => {
                let mut var_field0 = <crate::api::http::MultipartPayload>::sse_decode(deserializer);
                return crate::api::http::HttpBody::Multipart(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::http::HttpExpectBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::http::HttpExpectBody::Text,
            1 => crate::api::http::HttpExpectBody::Bytes,
            _ => unreachable!("Invalid variant for HttpExpectBody: {}", inner),
        };
    }
}

impl SseDecode for crate::api::http::HttpHeaders {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <std::collections::HashMap<String, String>>::sse_decode(deserializer);
                return crate::api::http::HttpHeaders::Map(var_field0);
            }
            1 => {
                let mut var_field0 = <Vec<(String, String)>>::sse_decode(deserializer);
                return crate::api::http::HttpHeaders::List(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::http::HttpMethod {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::http::HttpMethod::Options,
            1 => crate::api::http::HttpMethod::Get,
            2 => crate::api::http::HttpMethod::Post,
            3 => crate::api::http::HttpMethod::Put,
            4 => crate::api::http::HttpMethod::Delete,
            5 => crate::api::http::HttpMethod::Head,
            6 => crate::api::http::HttpMethod::Trace,
            7 => crate::api::http::HttpMethod::Connect,
            8 => crate::api::http::HttpMethod::Patch,
            _ => unreachable!("Invalid variant for HttpMethod: {}", inner),
        };
    }
}

impl SseDecode for crate::api::http::HttpResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_headers = <Vec<(String, String)>>::sse_decode(deserializer);
        let mut var_version = <crate::api::http::HttpVersion>::sse_decode(deserializer);
        let mut var_statusCode = <u16>::sse_decode(deserializer);
        let mut var_body = <crate::api::http::HttpResponseBody>::sse_decode(deserializer);
        return crate::api::http::HttpResponse {
            headers: var_headers,
            version: var_version,
            status_code: var_statusCode,
            body: var_body,
        };
    }
}

impl SseDecode for crate::api::http::HttpResponseBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::http::HttpResponseBody::Text(var_field0);
            }
            1 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::http::HttpResponseBody::Bytes(var_field0);
            }
            2 => {
                return crate::api::http::HttpResponseBody::Stream;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::http::HttpVersion {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::http::HttpVersion::Http09,
            1 => crate::api::http::HttpVersion::Http10,
            2 => crate::api::http::HttpVersion::Http11,
            3 => crate::api::http::HttpVersion::Http2,
            4 => crate::api::http::HttpVersion::Http3,
            5 => crate::api::http::HttpVersion::Other,
            _ => unreachable!("Invalid variant for HttpVersion: {}", inner),
        };
    }
}

impl SseDecode for crate::api::http::HttpVersionPref {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::http::HttpVersionPref::Http10,
            1 => crate::api::http::HttpVersionPref::Http11,
            2 => crate::api::http::HttpVersionPref::Http2,
            3 => crate::api::http::HttpVersionPref::Http3,
            4 => crate::api::http::HttpVersionPref::All,
            _ => unreachable!("Invalid variant for HttpVersionPref: {}", inner),
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Vec<u8>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, crate::api::http::MultipartItem)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, crate::api::http::MultipartItem)>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::http::MultipartItem {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <crate::api::http::MultipartValue>::sse_decode(deserializer);
        let mut var_fileName = <Option<String>>::sse_decode(deserializer);
        let mut var_contentType = <Option<String>>::sse_decode(deserializer);
        return crate::api::http::MultipartItem {
            value: var_value,
            file_name: var_fileName,
            content_type: var_contentType,
        };
    }
}

impl SseDecode for crate::api::http::MultipartPayload {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_parts =
            <Vec<(String, crate::api::http::MultipartItem)>>::sse_decode(deserializer);
        return crate::api::http::MultipartPayload { parts: var_parts };
    }
}

impl SseDecode for crate::api::http::MultipartValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::http::MultipartValue::Text(var_field0);
            }
            1 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::http::MultipartValue::Bytes(var_field0);
            }
            2 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::http::MultipartValue::File(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<chrono::Duration> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<chrono::Duration>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::client::ClientCertificate> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::client::ClientCertificate>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::client::ClientSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::client::ClientSettings>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::http::HttpBody> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::http::HttpBody>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::http::HttpHeaders> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::http::HttpHeaders>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::client::ProxySettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::client::ProxySettings>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::client::TlsSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::client::TlsSettings>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::client::TlsVersion> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::client::TlsVersion>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<(String, String)>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<(String, String)>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::client::ProxySettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::client::ProxySettings::NoProxy,
            _ => unreachable!("Invalid variant for ProxySettings: {}", inner),
        };
    }
}

impl SseDecode for (String, crate::api::http::MultipartItem) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::http::MultipartItem>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::api::error::RhttpError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::error::RhttpError::RhttpCancelError;
            }
            1 => {
                return crate::api::error::RhttpError::RhttpTimeoutError;
            }
            2 => {
                let mut var_field0 = <u16>::sse_decode(deserializer);
                let mut var_field1 = <Vec<(String, String)>>::sse_decode(deserializer);
                let mut var_field2 = <crate::api::http::HttpResponseBody>::sse_decode(deserializer);
                return crate::api::error::RhttpError::RhttpStatusCodeError(
                    var_field0, var_field1, var_field2,
                );
            }
            3 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::RhttpError::RhttpInvalidCertificateError(var_field0);
            }
            4 => {
                return crate::api::error::RhttpError::RhttpInvalidClientError;
            }
            5 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::RhttpError::RhttpUnknownError(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::client::TlsSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_trustRootCertificates = <bool>::sse_decode(deserializer);
        let mut var_trustedRootCertificates = <Vec<Vec<u8>>>::sse_decode(deserializer);
        let mut var_verifyCertificates = <bool>::sse_decode(deserializer);
        let mut var_clientCertificate =
            <Option<crate::api::client::ClientCertificate>>::sse_decode(deserializer);
        let mut var_minTlsVersion =
            <Option<crate::api::client::TlsVersion>>::sse_decode(deserializer);
        let mut var_maxTlsVersion =
            <Option<crate::api::client::TlsVersion>>::sse_decode(deserializer);
        return crate::api::client::TlsSettings {
            trust_root_certificates: var_trustRootCertificates,
            trusted_root_certificates: var_trustedRootCertificates,
            verify_certificates: var_verifyCertificates,
            client_certificate: var_clientCertificate,
            min_tls_version: var_minTlsVersion,
            max_tls_version: var_maxTlsVersion,
        };
    }
}

impl SseDecode for crate::api::client::TlsVersion {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::client::TlsVersion::Tls1_2,
            1 => crate::api::client::TlsVersion::Tls1_3,
            _ => unreachable!("Invalid variant for TlsVersion: {}", inner),
        };
    }
}

impl SseDecode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__client__client_settings_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        2 => wire__crate__api__http__cancel_request_impl(port, ptr, rust_vec_len, data_len),
        3 => wire__crate__api__http__make_http_request_impl(port, ptr, rust_vec_len, data_len),
        4 => wire__crate__api__http__make_http_request_receive_stream_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        5 => wire__crate__api__http__register_client_impl(port, ptr, rust_vec_len, data_len),
        7 => wire__crate__api__http__remove_client_impl(port, ptr, rust_vec_len, data_len),
        8 => wire__crate__api__init__init_app_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        6 => wire__crate__api__http__register_client_sync_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::client::ClientCertificate {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.certificate.into_into_dart().into_dart(),
            self.private_key.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::client::ClientCertificate
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::client::ClientCertificate>
    for crate::api::client::ClientCertificate
{
    fn into_into_dart(self) -> crate::api::client::ClientCertificate {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::client::ClientSettings {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.http_version_pref.into_into_dart().into_dart(),
            self.timeout.into_into_dart().into_dart(),
            self.connect_timeout.into_into_dart().into_dart(),
            self.throw_on_status_code.into_into_dart().into_dart(),
            self.proxy_settings.into_into_dart().into_dart(),
            self.tls_settings.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::client::ClientSettings
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::client::ClientSettings>
    for crate::api::client::ClientSettings
{
    fn into_into_dart(self) -> crate::api::client::ClientSettings {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::HttpBody {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::http::HttpBody::Text(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::http::HttpBody::Bytes(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::http::HttpBody::Form(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::http::HttpBody::Multipart(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::http::HttpBody {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::HttpBody> for crate::api::http::HttpBody {
    fn into_into_dart(self) -> crate::api::http::HttpBody {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::HttpExpectBody {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Text => 0.into_dart(),
            Self::Bytes => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::HttpExpectBody
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::HttpExpectBody>
    for crate::api::http::HttpExpectBody
{
    fn into_into_dart(self) -> crate::api::http::HttpExpectBody {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::HttpHeaders {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::http::HttpHeaders::Map(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::http::HttpHeaders::List(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::http::HttpHeaders {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::HttpHeaders>
    for crate::api::http::HttpHeaders
{
    fn into_into_dart(self) -> crate::api::http::HttpHeaders {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::HttpMethod {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Options => 0.into_dart(),
            Self::Get => 1.into_dart(),
            Self::Post => 2.into_dart(),
            Self::Put => 3.into_dart(),
            Self::Delete => 4.into_dart(),
            Self::Head => 5.into_dart(),
            Self::Trace => 6.into_dart(),
            Self::Connect => 7.into_dart(),
            Self::Patch => 8.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::http::HttpMethod {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::HttpMethod>
    for crate::api::http::HttpMethod
{
    fn into_into_dart(self) -> crate::api::http::HttpMethod {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::HttpResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.headers.into_into_dart().into_dart(),
            self.version.into_into_dart().into_dart(),
            self.status_code.into_into_dart().into_dart(),
            self.body.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::HttpResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::HttpResponse>
    for crate::api::http::HttpResponse
{
    fn into_into_dart(self) -> crate::api::http::HttpResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::HttpResponseBody {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::http::HttpResponseBody::Text(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::http::HttpResponseBody::Bytes(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::http::HttpResponseBody::Stream => [2.into_dart()].into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::HttpResponseBody
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::HttpResponseBody>
    for crate::api::http::HttpResponseBody
{
    fn into_into_dart(self) -> crate::api::http::HttpResponseBody {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::HttpVersion {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Http09 => 0.into_dart(),
            Self::Http10 => 1.into_dart(),
            Self::Http11 => 2.into_dart(),
            Self::Http2 => 3.into_dart(),
            Self::Http3 => 4.into_dart(),
            Self::Other => 5.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::http::HttpVersion {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::HttpVersion>
    for crate::api::http::HttpVersion
{
    fn into_into_dart(self) -> crate::api::http::HttpVersion {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::HttpVersionPref {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Http10 => 0.into_dart(),
            Self::Http11 => 1.into_dart(),
            Self::Http2 => 2.into_dart(),
            Self::Http3 => 3.into_dart(),
            Self::All => 4.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::HttpVersionPref
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::HttpVersionPref>
    for crate::api::http::HttpVersionPref
{
    fn into_into_dart(self) -> crate::api::http::HttpVersionPref {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::MultipartItem {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.value.into_into_dart().into_dart(),
            self.file_name.into_into_dart().into_dart(),
            self.content_type.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::MultipartItem
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::MultipartItem>
    for crate::api::http::MultipartItem
{
    fn into_into_dart(self) -> crate::api::http::MultipartItem {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::MultipartPayload {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.parts.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::MultipartPayload
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::MultipartPayload>
    for crate::api::http::MultipartPayload
{
    fn into_into_dart(self) -> crate::api::http::MultipartPayload {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::MultipartValue {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::http::MultipartValue::Text(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::http::MultipartValue::Bytes(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::http::MultipartValue::File(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::MultipartValue
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::MultipartValue>
    for crate::api::http::MultipartValue
{
    fn into_into_dart(self) -> crate::api::http::MultipartValue {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::client::ProxySettings {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::NoProxy => 0.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::client::ProxySettings
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::client::ProxySettings>
    for crate::api::client::ProxySettings
{
    fn into_into_dart(self) -> crate::api::client::ProxySettings {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::error::RhttpError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::error::RhttpError::RhttpCancelError => [0.into_dart()].into_dart(),
            crate::api::error::RhttpError::RhttpTimeoutError => [1.into_dart()].into_dart(),
            crate::api::error::RhttpError::RhttpStatusCodeError(field0, field1, field2) => [
                2.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
                field2.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::error::RhttpError::RhttpInvalidCertificateError(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::RhttpError::RhttpInvalidClientError => [4.into_dart()].into_dart(),
            crate::api::error::RhttpError::RhttpUnknownError(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::error::RhttpError {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::error::RhttpError>
    for crate::api::error::RhttpError
{
    fn into_into_dart(self) -> crate::api::error::RhttpError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::client::TlsSettings {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.trust_root_certificates.into_into_dart().into_dart(),
            self.trusted_root_certificates.into_into_dart().into_dart(),
            self.verify_certificates.into_into_dart().into_dart(),
            self.client_certificate.into_into_dart().into_dart(),
            self.min_tls_version.into_into_dart().into_dart(),
            self.max_tls_version.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::client::TlsSettings
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::client::TlsSettings>
    for crate::api::client::TlsSettings
{
    fn into_into_dart(self) -> crate::api::client::TlsSettings {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::client::TlsVersion {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Tls1_2 => 0.into_dart(),
            Self::Tls1_3 => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::client::TlsVersion
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::client::TlsVersion>
    for crate::api::client::TlsVersion
{
    fn into_into_dart(self) -> crate::api::client::TlsVersion {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for chrono::Duration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(
            self.num_microseconds()
                .expect("cannot get microseconds from time"),
            serializer,
        );
    }
}

impl SseEncode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.encode(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, String)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for StreamSink<Vec<u8>, flutter_rust_bridge::for_generated::SseCodec> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::client::ClientCertificate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.certificate, serializer);
        <Vec<u8>>::sse_encode(self.private_key, serializer);
    }
}

impl SseEncode for crate::api::client::ClientSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::http::HttpVersionPref>::sse_encode(self.http_version_pref, serializer);
        <Option<chrono::Duration>>::sse_encode(self.timeout, serializer);
        <Option<chrono::Duration>>::sse_encode(self.connect_timeout, serializer);
        <bool>::sse_encode(self.throw_on_status_code, serializer);
        <Option<crate::api::client::ProxySettings>>::sse_encode(self.proxy_settings, serializer);
        <Option<crate::api::client::TlsSettings>>::sse_encode(self.tls_settings, serializer);
    }
}

impl SseEncode for crate::api::http::HttpBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::http::HttpBody::Text(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::http::HttpBody::Bytes(field0) => {
                <i32>::sse_encode(1, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::http::HttpBody::Form(field0) => {
                <i32>::sse_encode(2, serializer);
                <std::collections::HashMap<String, String>>::sse_encode(field0, serializer);
            }
            crate::api::http::HttpBody::Multipart(field0) => {
                <i32>::sse_encode(3, serializer);
                <crate::api::http::MultipartPayload>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::http::HttpExpectBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::http::HttpExpectBody::Text => 0,
                crate::api::http::HttpExpectBody::Bytes => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::http::HttpHeaders {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::http::HttpHeaders::Map(field0) => {
                <i32>::sse_encode(0, serializer);
                <std::collections::HashMap<String, String>>::sse_encode(field0, serializer);
            }
            crate::api::http::HttpHeaders::List(field0) => {
                <i32>::sse_encode(1, serializer);
                <Vec<(String, String)>>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::http::HttpMethod {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::http::HttpMethod::Options => 0,
                crate::api::http::HttpMethod::Get => 1,
                crate::api::http::HttpMethod::Post => 2,
                crate::api::http::HttpMethod::Put => 3,
                crate::api::http::HttpMethod::Delete => 4,
                crate::api::http::HttpMethod::Head => 5,
                crate::api::http::HttpMethod::Trace => 6,
                crate::api::http::HttpMethod::Connect => 7,
                crate::api::http::HttpMethod::Patch => 8,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::http::HttpResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, String)>>::sse_encode(self.headers, serializer);
        <crate::api::http::HttpVersion>::sse_encode(self.version, serializer);
        <u16>::sse_encode(self.status_code, serializer);
        <crate::api::http::HttpResponseBody>::sse_encode(self.body, serializer);
    }
}

impl SseEncode for crate::api::http::HttpResponseBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::http::HttpResponseBody::Text(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::http::HttpResponseBody::Bytes(field0) => {
                <i32>::sse_encode(1, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::http::HttpResponseBody::Stream => {
                <i32>::sse_encode(2, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::http::HttpVersion {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::http::HttpVersion::Http09 => 0,
                crate::api::http::HttpVersion::Http10 => 1,
                crate::api::http::HttpVersion::Http11 => 2,
                crate::api::http::HttpVersion::Http2 => 3,
                crate::api::http::HttpVersion::Http3 => 4,
                crate::api::http::HttpVersion::Other => 5,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::http::HttpVersionPref {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::http::HttpVersionPref::Http10 => 0,
                crate::api::http::HttpVersionPref::Http11 => 1,
                crate::api::http::HttpVersionPref::Http2 => 2,
                crate::api::http::HttpVersionPref::Http3 => 3,
                crate::api::http::HttpVersionPref::All => 4,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Vec<u8>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, crate::api::http::MultipartItem)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, crate::api::http::MultipartItem)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::http::MultipartItem {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::http::MultipartValue>::sse_encode(self.value, serializer);
        <Option<String>>::sse_encode(self.file_name, serializer);
        <Option<String>>::sse_encode(self.content_type, serializer);
    }
}

impl SseEncode for crate::api::http::MultipartPayload {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, crate::api::http::MultipartItem)>>::sse_encode(self.parts, serializer);
    }
}

impl SseEncode for crate::api::http::MultipartValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::http::MultipartValue::Text(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::http::MultipartValue::Bytes(field0) => {
                <i32>::sse_encode(1, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::http::MultipartValue::File(field0) => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<chrono::Duration> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <chrono::Duration>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::client::ClientCertificate> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::client::ClientCertificate>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::client::ClientSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::client::ClientSettings>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::http::HttpBody> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::http::HttpBody>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::http::HttpHeaders> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::http::HttpHeaders>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::client::ProxySettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::client::ProxySettings>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::client::TlsSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::client::TlsSettings>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::client::TlsVersion> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::client::TlsVersion>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<(String, String)>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<(String, String)>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::client::ProxySettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::client::ProxySettings::NoProxy => 0,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for (String, crate::api::http::MultipartItem) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::api::http::MultipartItem>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::api::error::RhttpError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::error::RhttpError::RhttpCancelError => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::error::RhttpError::RhttpTimeoutError => {
                <i32>::sse_encode(1, serializer);
            }
            crate::api::error::RhttpError::RhttpStatusCodeError(field0, field1, field2) => {
                <i32>::sse_encode(2, serializer);
                <u16>::sse_encode(field0, serializer);
                <Vec<(String, String)>>::sse_encode(field1, serializer);
                <crate::api::http::HttpResponseBody>::sse_encode(field2, serializer);
            }
            crate::api::error::RhttpError::RhttpInvalidCertificateError(field0) => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::RhttpError::RhttpInvalidClientError => {
                <i32>::sse_encode(4, serializer);
            }
            crate::api::error::RhttpError::RhttpUnknownError(field0) => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::client::TlsSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.trust_root_certificates, serializer);
        <Vec<Vec<u8>>>::sse_encode(self.trusted_root_certificates, serializer);
        <bool>::sse_encode(self.verify_certificates, serializer);
        <Option<crate::api::client::ClientCertificate>>::sse_encode(
            self.client_certificate,
            serializer,
        );
        <Option<crate::api::client::TlsVersion>>::sse_encode(self.min_tls_version, serializer);
        <Option<crate::api::client::TlsVersion>>::sse_encode(self.max_tls_version, serializer);
    }
}

impl SseEncode for crate::api::client::TlsVersion {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::client::TlsVersion::Tls1_2 => 0,
                crate::api::client::TlsVersion::Tls1_3 => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // Generated by `flutter_rust_bridge`@ 2.3.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // Generated by `flutter_rust_bridge`@ 2.3.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
